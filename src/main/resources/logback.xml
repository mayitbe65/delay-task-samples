<?xml version="1.0" encoding="UTF-8"?>
<!-- 此处的debug指是否打印logback内部日志信息 -->
<configuration debug="false" scan="true" scanPeriod="10 seconds">
    <!-- 应用名称 -->
    <property name="APP_NAME" value="mq-demo"/>
    <!-- pod name-->
    <property name="POD_NAME" value="${POD_NAME}"/>
    <!--日志文件的保存路径,首先查找系统属性-Dlog.dir,如果存在就使用其；否则，在当前目录下创建名为logs目录做日志存放的目录 -->
    <property name="LOG_HOME" value="./logs/${APP_NAME}"/>
    <!-- 日志输出格式 -->
    <property name="ENCODER_PATTERN"
              value="%d{yyyy-MM-dd HH:mm:ss.SSS} [${APP_NAME}] [%thread] %-5level [%logger] -%msg%n"/>
    <contextName>${APP_NAME}</contextName>
 
    <!-- 控制台日志：输出全部日志到控制台 线上环境避免控制台输出，占内存-->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
     <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
      <Pattern>${ENCODER_PATTERN}</Pattern>
     </encoder>
   </appender>
 
    <!-- 文件日志：输出全部日志到文件 -->
    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_HOME}/info.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${LOG_HOME}/info.%i.log.%d{yyyy-MM-dd}</fileNamePattern>
            <maxHistory>5</maxHistory>
            <maxFileSize>100MB</maxFileSize>
            <totalSizeCap>500MB</totalSizeCap>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${ENCODER_PATTERN}</pattern>
        </encoder>
    </appender>
 
    <!-- 错误日志：用于将错误日志输出到独立文件 -->
    <appender name="ERROR_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_HOME}/error.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${LOG_HOME}/error.%i.log.%d{yyyy-MM-dd}</fileNamePattern>
            <maxHistory>5</maxHistory>
            <maxFileSize>100MB</maxFileSize>
            <totalSizeCap>500MB</totalSizeCap>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${ENCODER_PATTERN}</pattern>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>ERROR</level>
        </filter>
    </appender>
 
    <!--日志文件异步写入配置-->
    <appender name="ASYNC_FILE" class="ch.qos.logback.classic.AsyncAppender">
        <appender-ref ref="FILE"/>
    </appender>
 
    <!--错误日志文件异步写入配置-->
    <appender name="ASYNC_ERROR_FILE" class="ch.qos.logback.classic.AsyncAppender">
        <appender-ref ref="ERROR_FILE"/>
    </appender>
 
    <logger name="com.brcloud" level="WARN"/>
    <logger name="org.springframework.boot.context.embedded.tomcat" level="INFO"/>
 
    <logger name="org.springframework" level="INFO"/>
    <logger name="com.netflix" level="WARN"/>
 
 
    <!--TRACE, DEBUG, INFO, WARN, ERROR, ALL and OFF -->
    <root>
        <level value="INFO"/>
        <appender-ref ref="STDOUT"/>
        <appender-ref ref="ASYNC_FILE"/>
        <appender-ref ref="ASYNC_ERROR_FILE"/>
    </root>
</configuration>